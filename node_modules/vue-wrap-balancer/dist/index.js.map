{"version":3,"sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["/*!\n * Original code by Shu Ding\n * MIT Licensed, Copyright 2022 Shu Ding, see https://github.com/shuding/react-wrap-balancer/blob/main/LICENSE.md for details\n *\n * Credits to the team:\n * https://github.com/shuding/react-wrap-balancer/blob/main/src/index.tsx\n */\nimport { computed, defineComponent, h, inject, onUnmounted, provide, ref, unref, watchPostEffect, withDirectives } from 'vue'\nimport { nanoid } from 'nanoid'\nimport { vBindOnce } from './utils'\n\nconst SYMBOL_KEY = '__wrap_b'\nconst SYMBOL_NATIVE_KEY = '__wrap_n'\nconst SYMBOL_OBSERVER_KEY = '__wrap_o'\n\ntype RelayoutFn = (\n  id: string | number,\n  ratio: number,\n  wrapper?: HTMLElement\n) => void\n\ndeclare global {\n  interface Window {\n    [SYMBOL_KEY]: RelayoutFn\n    // A flag to indicate whether the browser supports text-balancing natively.\n    // undefined: not injected\n    // 1: injected and supported\n    // 2: injected but not supported\n    [SYMBOL_NATIVE_KEY]?: number\n  }\n\n  interface HTMLElement {\n    [SYMBOL_OBSERVER_KEY]: ResizeObserver | undefined\n  }\n}\n\nconst relayout: RelayoutFn = (id, ratio, wrapper) => {\n  wrapper = wrapper || (document.querySelector(`[data-br=\"${id}\"]`) as HTMLElement)\n  const container = wrapper.parentElement as HTMLElement\n\n  const update = (width: number) => (wrapper!.style.maxWidth = `${width}px`)\n\n  // Reset wrapper width\n  wrapper.style.maxWidth = ''\n\n  // Get the intial container size\n  const width = container.clientWidth\n  const height = container.clientHeight\n\n  // Synchronously do binary search and calculate the layout\n  let lower: number = width / 2 - 0.25\n  let upper: number = width + 0.5\n  let middle: number\n\n  if (width) {\n    // Ensure we don't search widths lower than when the text overflows\n    update(lower)\n    lower = Math.max(wrapper.scrollWidth, lower)\n\n    while (lower + 1 < upper) {\n      middle = Math.round((lower + upper) / 2)\n      update(middle)\n      if (container.clientHeight === height)\n        upper = middle\n\n      else\n        lower = middle\n    }\n\n    // Update the wrapper width\n    update(upper * ratio + width * (1 - ratio))\n  }\n\n  // Create a new observer if we don't have one.\n  // Note that we must inline the key here as we use `toString()` to serialize\n  // the function.\n  if (!wrapper.__wrap_o) {\n    (wrapper.__wrap_o = new ResizeObserver(() => {\n      self.__wrap_b(0, +wrapper!.dataset.brr!, wrapper)\n    })).observe(container)\n  }\n}\n\nconst RELAYOUT_STR = relayout.toString()\n\nconst isTextWrapBalanceSupported = '(self.CSS&&CSS.supports(\"text-wrap\",\"balance\")?1:2)'\n\nfunction createScriptElement(injected: boolean, nonce?: string, suffix?: string) {\n  if (suffix)\n    suffix = `self.${SYMBOL_NATIVE_KEY}!=1&&${suffix}`\n\n  return h('script', {\n    innerHTML: (injected ? '' : `self.${SYMBOL_NATIVE_KEY}=self.${SYMBOL_NATIVE_KEY}||${isTextWrapBalanceSupported};self.${SYMBOL_KEY}=${RELAYOUT_STR};`) + suffix,\n    nonce,\n  })\n}\n\nexport const BalancerProvider = defineComponent({\n  name: 'BalancerProvider',\n  props: {\n    /**\n     * An option to skip the re-balance logic\n     * and use the native CSS text-balancing if supported.\n     * @default true\n     */\n    preferNative: {\n      type: Boolean,\n      required: false,\n      default: true,\n    },\n    /**\n     * The nonce attribute to allowlist inline script injection by the component\n     */\n    nonce: {\n      type: String,\n      required: false,\n    },\n  },\n  setup(props, { slots }) {\n    const preferNative = computed(() => props.preferNative)\n    provide('BALANCER_PROVIDER', {\n      preferNative,\n      hasProvider: true,\n    })\n\n    return () => [\n      createScriptElement(false, props.nonce),\n      slots.default?.(),\n    ]\n  },\n})\n\nexport default defineComponent({\n  name: 'WrapBalancer',\n  props: {\n    /**\n     * The HTML tag to use for the wrapper element.\n     * @default 'span'\n     */\n    as: {\n      type: String,\n      required: false,\n      default: 'span',\n    },\n    /**\n     * The balance ratio of the wrapper width (0 <= ratio <= 1).\n     * 0 means the wrapper width is the same as the container width (no balance, browser default).\n     * 1 means the wrapper width is the minimum (full balance, most compact).\n     * @default 1\n     */\n    ratio: {\n      type: Number,\n      required: false,\n      default: 1,\n    },\n    /**\n     * An option to skip the re-balance logic\n     * and use the native CSS text-balancing if supported.\n     * @default true\n     */\n    preferNative: {\n      type: Boolean,\n      required: false,\n      default: true,\n    },\n    /**\n     * The nonce attribute to allowlist inline script injection by the component.\n     */\n    nonce: {\n      type: String,\n      required: false,\n    },\n  },\n  setup(props, { slots, attrs }) {\n    const As = props.as\n    const id = attrs.id || nanoid(5)\n    const wrapperRef = ref<HTMLElement | null>(null)\n    const contextValue = inject('BALANCER_PROVIDER', {\n      preferNative: true,\n      hasProvider: false,\n    })\n\n    const preferNativeBalancing = computed(() => props.preferNative ?? unref(contextValue.preferNative))\n\n    // Re-balance on content change and on mount/hydration\n    watchPostEffect(() => {\n      // Skip if the browser supports text-balancing natively.\n      if (preferNativeBalancing.value && typeof self !== 'undefined' && self[SYMBOL_NATIVE_KEY] === 1)\n        return\n\n      if (wrapperRef.value)\n        (self[SYMBOL_KEY] = relayout)(0, props.ratio, wrapperRef.value)\n    })\n\n    // Remove the observer when unmounting.\n    onUnmounted(() => {\n      // Skip if the browser supports text-balancing natively.\n      if (preferNativeBalancing.value && typeof self !== 'undefined' && self[SYMBOL_NATIVE_KEY] === 1)\n        return\n\n      if (!wrapperRef.value)\n        return\n\n      const resizeObserver = wrapperRef.value[SYMBOL_OBSERVER_KEY]\n      if (resizeObserver) {\n        resizeObserver.disconnect()\n        delete wrapperRef.value[SYMBOL_OBSERVER_KEY]\n      }\n    })\n\n    return () => withDirectives(h(As, {\n      ...attrs,\n      'data-brr': props.ratio,\n      'ref': wrapperRef,\n      'style': {\n        ...attrs.style as Record<string, string>,\n        display: 'inline-block',\n        verticalAlign: 'top',\n        textDecoration: 'inherit',\n        textWrap: preferNativeBalancing.value ? 'balance' : 'initial',\n      },\n    }, [\n      slots.default?.(),\n      withDirectives(createScriptElement(contextValue.hasProvider, props.nonce, `self.${SYMBOL_KEY}(document.currentScript.dataset.ssrId,${props.ratio})`), [\n        [vBindOnce, ['data-ssr-id', id]]],\n      ),\n    ]), [\n      [vBindOnce, ['data-br', id]],\n    ])\n  },\n})\n","import type { Directive, DirectiveBinding } from 'vue'\nimport { nanoid } from 'nanoid'\n\nexport const vBindOnce: Directive<HTMLElement> = {\n  created(el, binding: DirectiveBinding<[string, string]>) {\n    const [key, value] = binding.value\n    el.setAttribute(key, value || nanoid(5))\n  },\n  getSSRProps(binding: DirectiveBinding<[string, string]>) {\n    const [key, value] = binding.value\n    return {\n      [key]: value,\n    }\n  },\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,iBAAwH;AACxH,IAAAA,iBAAuB;;;ACPvB,oBAAuB;AAEhB,IAAM,YAAoC;AAAA,EAC/C,QAAQ,IAAI,SAA6C;AACvD,UAAM,CAAC,KAAK,KAAK,IAAI,QAAQ;AAC7B,OAAG,aAAa,KAAK,aAAS,sBAAO,CAAC,CAAC;AAAA,EACzC;AAAA,EACA,YAAY,SAA6C;AACvD,UAAM,CAAC,KAAK,KAAK,IAAI,QAAQ;AAC7B,WAAO;AAAA,MACL,CAAC,MAAM;AAAA,IACT;AAAA,EACF;AACF;;;ADHA,IAAM,aAAa;AACnB,IAAM,oBAAoB;AAC1B,IAAM,sBAAsB;AAuB5B,IAAM,WAAuB,CAAC,IAAI,OAAO,YAAY;AACnD,YAAU,WAAY,SAAS,cAAc,aAAa,MAAM;AAChE,QAAM,YAAY,QAAQ;AAE1B,QAAM,SAAS,CAACC,WAAmB,QAAS,MAAM,WAAW,GAAGA;AAGhE,UAAQ,MAAM,WAAW;AAGzB,QAAM,QAAQ,UAAU;AACxB,QAAM,SAAS,UAAU;AAGzB,MAAI,QAAgB,QAAQ,IAAI;AAChC,MAAI,QAAgB,QAAQ;AAC5B,MAAI;AAEJ,MAAI,OAAO;AAET,WAAO,KAAK;AACZ,YAAQ,KAAK,IAAI,QAAQ,aAAa,KAAK;AAE3C,WAAO,QAAQ,IAAI,OAAO;AACxB,eAAS,KAAK,OAAO,QAAQ,SAAS,CAAC;AACvC,aAAO,MAAM;AACb,UAAI,UAAU,iBAAiB;AAC7B,gBAAQ;AAAA;AAGR,gBAAQ;AAAA,IACZ;AAGA,WAAO,QAAQ,QAAQ,SAAS,IAAI,MAAM;AAAA,EAC5C;AAKA,MAAI,CAAC,QAAQ,UAAU;AACrB,KAAC,QAAQ,WAAW,IAAI,eAAe,MAAM;AAC3C,WAAK,SAAS,GAAG,CAAC,QAAS,QAAQ,KAAM,OAAO;AAAA,IAClD,CAAC,GAAG,QAAQ,SAAS;AAAA,EACvB;AACF;AAEA,IAAM,eAAe,SAAS,SAAS;AAEvC,IAAM,6BAA6B;AAEnC,SAAS,oBAAoB,UAAmB,OAAgB,QAAiB;AAC/E,MAAI;AACF,aAAS,QAAQ,yBAAyB;AAE5C,aAAO,cAAE,UAAU;AAAA,IACjB,YAAY,WAAW,KAAK,QAAQ,0BAA0B,sBAAsB,mCAAmC,cAAc,mBAAmB;AAAA,IACxJ;AAAA,EACF,CAAC;AACH;AAEO,IAAM,uBAAmB,4BAAgB;AAAA,EAC9C,MAAM;AAAA,EACN,OAAO;AAAA,IAML,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,UAAU;AAAA,MACV,SAAS;AAAA,IACX;AAAA,IAIA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,OAAO,EAAE,MAAM,GAAG;AACtB,UAAM,mBAAe,qBAAS,MAAM,MAAM,YAAY;AACtD,4BAAQ,qBAAqB;AAAA,MAC3B;AAAA,MACA,aAAa;AAAA,IACf,CAAC;AAED,WAAO,MAAG;AA7Hd;AA6HiB;AAAA,QACX,oBAAoB,OAAO,MAAM,KAAK;AAAA,SACtC,WAAM,YAAN;AAAA,MACF;AAAA;AAAA,EACF;AACF,CAAC;AAED,IAAO,kBAAQ,4BAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,OAAO;AAAA,IAKL,IAAI;AAAA,MACF,MAAM;AAAA,MACN,UAAU;AAAA,MACV,SAAS;AAAA,IACX;AAAA,IAOA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,MACV,SAAS;AAAA,IACX;AAAA,IAMA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,UAAU;AAAA,MACV,SAAS;AAAA,IACX;AAAA,IAIA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,MAAM,OAAO,EAAE,OAAO,MAAM,GAAG;AAC7B,UAAM,KAAK,MAAM;AACjB,UAAM,KAAK,MAAM,UAAM,uBAAO,CAAC;AAC/B,UAAM,iBAAa,gBAAwB,IAAI;AAC/C,UAAM,mBAAe,mBAAO,qBAAqB;AAAA,MAC/C,cAAc;AAAA,MACd,aAAa;AAAA,IACf,CAAC;AAED,UAAM,4BAAwB,qBAAS,MAAG;AAtL9C;AAsLiD,yBAAM,iBAAN,gBAAsB,kBAAM,aAAa,YAAY;AAAA,KAAC;AAGnG,oCAAgB,MAAM;AAEpB,UAAI,sBAAsB,SAAS,OAAO,SAAS,eAAe,KAAK,uBAAuB;AAC5F;AAEF,UAAI,WAAW;AACb,SAAC,KAAK,cAAc,UAAU,GAAG,MAAM,OAAO,WAAW,KAAK;AAAA,IAClE,CAAC;AAGD,gCAAY,MAAM;AAEhB,UAAI,sBAAsB,SAAS,OAAO,SAAS,eAAe,KAAK,uBAAuB;AAC5F;AAEF,UAAI,CAAC,WAAW;AACd;AAEF,YAAM,iBAAiB,WAAW,MAAM;AACxC,UAAI,gBAAgB;AAClB,uBAAe,WAAW;AAC1B,eAAO,WAAW,MAAM;AAAA,MAC1B;AAAA,IACF,CAAC;AAED,WAAO,MAAG;AAlNd;AAkNiB,gDAAe,cAAE,IAAI;AAAA,QAChC,GAAG;AAAA,QACH,YAAY,MAAM;AAAA,QAClB,OAAO;AAAA,QACP,SAAS;AAAA,UACP,GAAG,MAAM;AAAA,UACT,SAAS;AAAA,UACT,eAAe;AAAA,UACf,gBAAgB;AAAA,UAChB,UAAU,sBAAsB,QAAQ,YAAY;AAAA,QACtD;AAAA,MACF,GAAG;AAAA,SACD,WAAM,YAAN;AAAA,YACA;AAAA,UAAe,oBAAoB,aAAa,aAAa,MAAM,OAAO,QAAQ,mDAAmD,MAAM,QAAQ;AAAA,UAAG;AAAA,YACpJ,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;AAAA,UAAC;AAAA,QAClC;AAAA,MACF,CAAC,GAAG;AAAA,QACF,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;AAAA,MAC7B,CAAC;AAAA;AAAA,EACH;AACF,CAAC;","names":["import_nanoid","width"]}