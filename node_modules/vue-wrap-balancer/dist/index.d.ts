import * as vue from 'vue';

declare const SYMBOL_KEY = "__wrap_b";
declare const SYMBOL_NATIVE_KEY = "__wrap_n";
declare const SYMBOL_OBSERVER_KEY = "__wrap_o";
type RelayoutFn = (id: string | number, ratio: number, wrapper?: HTMLElement) => void;
declare global {
    interface Window {
        [SYMBOL_KEY]: RelayoutFn;
        [SYMBOL_NATIVE_KEY]?: number;
    }
    interface HTMLElement {
        [SYMBOL_OBSERVER_KEY]: ResizeObserver | undefined;
    }
}
declare const BalancerProvider: vue.DefineComponent<{
    /**
     * An option to skip the re-balance logic
     * and use the native CSS text-balancing if supported.
     * @default true
     */
    preferNative: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * The nonce attribute to allowlist inline script injection by the component
     */
    nonce: {
        type: StringConstructor;
        required: false;
    };
}, () => (vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}> | vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>[] | undefined)[], unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
    /**
     * An option to skip the re-balance logic
     * and use the native CSS text-balancing if supported.
     * @default true
     */
    preferNative: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * The nonce attribute to allowlist inline script injection by the component
     */
    nonce: {
        type: StringConstructor;
        required: false;
    };
}>>, {
    preferNative: boolean;
}, {}>;
declare const _default: vue.DefineComponent<{
    /**
     * The HTML tag to use for the wrapper element.
     * @default 'span'
     */
    as: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    /**
     * The balance ratio of the wrapper width (0 <= ratio <= 1).
     * 0 means the wrapper width is the same as the container width (no balance, browser default).
     * 1 means the wrapper width is the minimum (full balance, most compact).
     * @default 1
     */
    ratio: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /**
     * An option to skip the re-balance logic
     * and use the native CSS text-balancing if supported.
     * @default true
     */
    preferNative: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * The nonce attribute to allowlist inline script injection by the component.
     */
    nonce: {
        type: StringConstructor;
        required: false;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
    /**
     * The HTML tag to use for the wrapper element.
     * @default 'span'
     */
    as: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    /**
     * The balance ratio of the wrapper width (0 <= ratio <= 1).
     * 0 means the wrapper width is the same as the container width (no balance, browser default).
     * 1 means the wrapper width is the minimum (full balance, most compact).
     * @default 1
     */
    ratio: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /**
     * An option to skip the re-balance logic
     * and use the native CSS text-balancing if supported.
     * @default true
     */
    preferNative: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * The nonce attribute to allowlist inline script injection by the component.
     */
    nonce: {
        type: StringConstructor;
        required: false;
    };
}>>, {
    preferNative: boolean;
    as: string;
    ratio: number;
}, {}>;

export { BalancerProvider, _default as default };
